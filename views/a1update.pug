extends layout.pug

block append headBlock
    link(rel="stylesheet", href="/a1updatestyle.css")
    script. 
        function addImageStack(){
            let addButton = document.getElementById("addImageStack");
            let myparentNode = document.getElementById("addImageStack").parentNode;
            let stackCountNode = document.getElementById("iStackCount");
            let stackCount = Number(stackCountNode.innerHTML);
            stackCount++;
            stackCountNode.innerHTML = stackCount.toString();
            
            newButton = document.createElement('button');
            newButton.className = "collapsible";
            newButton.type ="button";
            newButton.innerHTML = "Image Stack " + stackCount;
            newButton.addEventListener("click", function() {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                        content.style.display = "block";
                }
            });

            newDiv = document.createElement('div');
            newDiv.className = "content";
            newDiv.id = "iStack" + stackCount;

            newText = document.createElement("p");
            newNode = document.createTextNode("This is a text node");
            newText.appendChild(newNode);
            newDiv.appendChild(newText);

            myparentNode.insertBefore(newButton, addButton);
            myparentNode.insertBefore(newDiv, addButton);
            //add another button(type="button" class="collapsible") Image Stack #{stackNum} 
            //div(id=divID class="content")
        }

        function updateCurrent(){

            let numOfStacks = Number(document.getElementById("iStackCount").innerHTML);
            console.log(numOfStacks);
            i=0;
            for(i=0; i<numOfStacks; i++){
                let stackNum = i + 1;
                let divID = "iStack" + stackNum;
                let introID = divID + "Intro";
                let img1ID = divID + "Img1";
                let img2ID = divID + "Img2";
                let expID = divID + "Exp";
                let sameID = divID + "Same";
                let caID = divID + "CA";
                if(document.getElementById(introID).value){
                    
                }
            }
        }
        

        function saveAsNew(){
            console.log("save as new");
        }

block append myBody
    .topPart
        h2 Digital Futures <br> Initiative
    .mainStuff
        button(type="button" class="collapsible active") Verification
        div(class="content" id="verificationDiv" style="display: block")
            h2  Verify
            p.   
                Top Level Grouping: #{myA1.TopLevelGroup} <br>
                SubGrouping: #{myA1.SubGrouping} <br>
                Activity Grouping: #{myA1.ActivityGrouping} <br>
                Activity Name: #{myA1.ActivityName} <br>
                Language: #{myA1.Language} <br>
                Age Group <br>
            ul 
                each val, index in myA1.AgeGroups
                    li= myA1.AgeGroups[index]
            p   Countries/Regions <br> 
            ul 
                each val, index in myA1.Countries
                    li= myA1.Countries[index].Country + ", " + myA1.Countries[index].Region
            p Are you sure you want to make a new one rather than use another? (put a button here)
        button(type="button" class="collapsible") Image Stack
        div(id="iStackDiv" class="content")
            h2  Image Stack
            p(id="countText")   This activity has <span id="iStackCount"> #{myA1.ImageStack.length} </span> image stacks
            div(class="column1")
                //create the set up for each item in the image stack
                each val, index in myA1.ImageStack
                    - var stackNum = index + 1;
                    - var divID = "iStack" + stackNum;
                    - var introID = divID + "Intro";
                    - var img1ID = divID + "Img1";
                    - var img2ID = divID + "Img2";
                    - var expID = divID + "Exp";
                    - var sameID = divID + "Same";
                    - var caID = divID + "CA";
                    - var correctAnswer = myA1.ImageStack[index].correctAnswer;
                    //create a collapsible for each stack
                    button(type="button" class="collapsible") Image Stack #{stackNum} 
                    div(id=divID class="content")
                        p.  
                            <label for=#{introID}>Change the Stack Intro from: <b> #{myA1.ImageStack[index].stackIntro} </b> <br> TO <br> </label>
                            <input type="text" id=#{introID} name=#{introID}><br><br> 
                        div(class="halfcolumn")
                            h3  Image One: Manipulated
                            - var imageLink = myA1.ImageStack[index].stackImg1;
                            img(src=imageLink, alt="The manipulated image", width="300", height="225") 
                            <br>
                            button(type="button") Upload New Image
                        div(class="halfcolumn")
                            h3  Image Two: Unmanipulated
                            - var imageLink = myA1.ImageStack[index].stackImg2;
                            img(src=imageLink, alt="Unmanipulated image", width="300", height="225")  
                            <br>
                            button(type="button") Upload New Image
                        p. 
                            <label for=#{expID}> Change the Explanation from: <br> <b> !{myA1.ImageStack[index].stackExplain} </b> <br> TO <br> </label>
                            <input type="text" id=#{expID} name=#{expID}><br><br> 
                            
                            <b> Are the two images the same? <br> </b>
                            NOTE: Setting this value to true will skip the display both images screen <br> 
                            <label class="switch" for=#{sameID}>
                            <input type="checkbox" id=#{sameID} name=#{sameID}>
                            <span class="slider"></span>
                            </label>
                            <br>
                            <br>
                            <label for=caID> Change Correct Answer:&nbsp;&nbsp;</label>
                        select(id=caID name =caID)
                            each val, index in myA1.Question1.responseStack
                                - var myAnswer = myA1.Question1.responseStack[index].radioText;
                                - var myValue = myA1.Question1.responseStack[index].radioValue;
                                if myAnswer == correctAnswer
                                    option(value=myValue selected="selected") #{myAnswer}
                                else  
                                    option(value=myValue) #{myAnswer}
                            </select>
                            <br> 
                            <br>
                        script. 
                            //script to set the isSame value
                            document.getElementById('#{sameID}').checked= #{myA1.ImageStack[index].isSame};
                button(type="button" onClick="addImageStack();" id="addImageStack" style="padding: 10px")   Add Image Stack
            div(class="column2")
                img(src='/images/lessonupdate/ImageStack.png', alt="image of what the photos look like in the app", width='90%')
            <br>
        button(type="button" class="collapsible") Question One 
        div(id="qOne" class="content")
            div(class="column1")
                h2 Question One
                <label for="q1QT"> Change question 1 from <b> #{myA1.Question1.questionText} </b> TO <br> </label>
                <input type="text" id="q1QT" name="q1QT"> <br> <br>
                p   Change the user responses below:
                each val, index in myA1.Question1.responseStack
                    - var myAnswer = myA1.Question1.responseStack[index].radioText;
                    - var labelName = "q1RS" + index;
                    label(for=labelName) from <b> #{myAnswer} </b> TO 
                    input(type=text id=labelName name=labelName) 
                    <br>
            div(class="column2")
                img(src='/images/lessonupdate/Question1.png', alt="image of what question one looks like on the app", width='90%')
        button(type="button" class="collapsible") Social Consequences  
        div(id="sCo" class="content")
            div(class="column1")
                h2  Social Consequences
                p   NOTE: Only update the items you want to change. All other items will be preserved.
                p.
                    <label for="scHeader">Change the header from: <b> #{myA1.SocialConsequences.reflectHeader} </b> TO</label>
                    <input type="text" id="header" name="header"><br><br>

                    <label for="scQ1"> Change Reflect Question 1 from: <br> <b> 
                                #{myA1.SocialConsequences.reflectQuestion1} </b> <br> TO </label>
                    <input type="text" id="scQ1" name="scQ1"><br> <br>
                    
                    <label for="scQ2"> Change Reflect Question 2 from: <br> <b> 
                                #{myA1.SocialConsequences.reflectQuestion2} </b> <br> TO </label>
                    <input type="text" id="scQ2" name="scQ2"><br> <br>

                    <label for="mild"> Change <b> #{myA1.SocialConsequences.mild}</b> TO </label>
                    <input type="text" id="mild" name="mild">
                    <label for="severe"> and <b> #{myA1.SocialConsequences.severe} </b> TO  </label>  
                    <input type="text" id="server" name="severe"> <br> <br>

                    <label for="leadCon"> Change the lead text for the consequences from <b> #{myA1.SocialConsequences.cLeadText}</b> TO <br> </label>
                    <input type="text" id="leadCon" name="leadCon"> <br> <br>
                    
                    Change the consequence levels from <br>
                    <label for="c1"> <b> #{myA1.SocialConsequences.c1Text} </b>  TO </label>
                    <input = "text" id="c1" name="c1"> <br>

                    <label for="c2"> <b> #{myA1.SocialConsequences.c2Text} </b>  TO </label>
                    <input = "text" id="c2" name="c2"> <br>

                    <label for="c3"> <b> #{myA1.SocialConsequences.c3Text} </b>  TO </label>
                    <input = "text" id="c3" name="c3"> <br>

                    <label for="c4"> <b> #{myA1.SocialConsequences.c4Text} </b>  TO </label>
                    <input = "text" id="c4" name="c4"> <br>

                    <label for="c5"> <b> #{myA1.SocialConsequences.c5Text} </b>  TO </label>
                    <input = "text" id="c5" name="c5"> <br>
    
                    <label for="c6"> <b> #{myA1.SocialConsequences.c6Text} </b>  TO </label>
                    <input = "text" id="c6" name="c6"> <br>
            div(class="column2")
                img(src='/images/lessonupdate/SocialConsequences.png', alt="image of the social consequences screen", width='90%')
        button(type="button" class="collapsible") Question Two 
        div(id="qTwo" class="content")
            div(class="column1")
                h2 Question Two 
                <label for="q2QT"> Change question 2 from <b> #{myA1.Question2.questionText} </b> TO <br> </label>
                <input type="text" id="q2QT" name="q2QT"> <br> <br>
                p   Change the user responses and links below:
                each val, index in myA1.Question2.responseStack
                    - var myAnswer = myA1.Question2.responseStack[index].radioText;
                    - var myLink = myA1.Question2.responseStack[index].link;
                    - var labelName = "q2RS" + index;
                    - var linkName = "q2Lnk" + index;
                    label(for=labelName) from <b> #{myAnswer} </b> TO 
                    input(type=text id=labelName name=labelName)
                    <br>
                    label(for=linkName) from <b> #{myLink} </b> TO 
                    input(type=text id=linkName name=linkName)
                    <br><br>
            div(class="column2")
                img(src='/images/lessonupdate/Question2.png', alt="image of how question 2 is used in the actual lesson", width='90%')
        button(type="button" class="collapsible") Motivation 
        div(id="motivations" class="content")
            div(class="column1")
                h2  Motivations For Disinformation
                <label for="motiveIntro"> Change introduction from <b> #{myA1.Reasons.reasonsIntro} </b> TO <br> </label>
                <input type="text" id="motiveIntro" name="motiveIntro"> <br> <br>
                <label for="motiveExplain"> Change introduction from <b> #{myA1.Reasons.reasonsText} </b> TO <br> </label>
                <input type="text" id="motiveExplain" name="motiveExplain"> <br> <br>   
                each val, index in myA1.Reasons.reasonsStack
                    - var myAnswer = myA1.Reasons.reasonsStack[index].text;
                    - var myLink = myA1.Reasons.reasonsStack[index].link;
                    - var labelName = "motiveRS" + index;
                    - var linkName = "motiveLnk" + index;
                    label(for=labelName) from <b> #{myAnswer} </b> TO 
                    input(type=text id=labelName name=labelName)
                    <br>
                    label(for=linkName) from <b> #{myLink} </b> TO 
                    input(type=text id=linkName name=linkName)
                    <br><br>
            div(class="column2")
                img(src='/images/lessonupdate/Question2.png', alt="image of how question 2 is used in the actual lesson", width='90%')
        button(type="button" id="updateCurrent" style="padding: 10px" onClick="updateCurrent()") Update Current Lesson
        button(type="button" id="saveAsNew" style="padding: 10px" onClick="saveAsNew()") Save As New 
    script. 
        var coll = document.getElementsByClassName("collapsible");
        var i;
        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function() {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                        content.style.display = "block";
                }
            });
        }
